* Emacs config
** General
   #+BEGIN_SRC emacs-lisp
     (setq user-full-name "Berto Yáñez"
           user-mail-address "berto@ber.to")

     ;; save the position of the cursor
     (save-place-mode 1)

     ;; increase garbage collection
     (setq-default gc-cons-threshold 20000000)

     ;; remove splash screen and set default mode
     (setq inhibit-splash-screen t
           initial-scratch-message nil
           )

     ;; UTF-8
     (setq locale-coding-system 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
     (when (display-graphic-p)
       (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

     ;; Cursor
     (setq-default cursor-type 'box)
     (setq-default cursor-in-non-selected-windows 'bar)

     ;; Disable lockfiles
     (setq create-lockfiles nil)

     ;; revert buffer if file has changed
     (global-auto-revert-mode)

     ;; Remove menu bar and toolbar in GUI mode
     ;; (menu-bar-mode -1)
     (tool-bar-mode -1)
     (scroll-bar-mode -1)

     ;; sentences do not need double spaces
     (set-default 'sentence-end-double-space nil)

     ;; select like other editors
     (delete-selection-mode t)
     (transient-mark-mode t)

     ;; use system clipboard
     (setq select-enable-clipboard t)

     ;; show directories first in dired
     (setq dired-listing-switches "-aBhl")

     ;; scroll to top and bottom more naturally
     (setq scroll-error-top-bottom t)

     ;; show empty lines at the end
     (setq-default indicate-empty-lines t)
     (when (not indicate-empty-lines)
       (toggle-indicate-empty-lines))

     ;; tabs as 2 spaces
     (setq-default indent-tabs-mode nil)
     (setq tab-width 2)
     (setq-default sgml-basic-offset 2)

     ;; Place all the backups in one directory
     (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
     (setq delete-old-versions -1)
     (setq version-control t)
     (setq vc-make-backup-files t)
     (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

     ;; save history
     (setq savehist-file "~/.emacs.d/savehist")
     (savehist-mode 1)
     (setq history-length t)
     (setq history-delete-duplicates t)
     (setq savehist-save-minibuffer-history 1)
     (setq savehist-additional-variables
           '(kill-ring
             search-ring
             regexp-search-ring))
     (setq save-interprogram-paste-before-kill t)

     ;; Fastest input
     (fset 'yes-or-no-p 'y-or-n-p)

     ;; Disable bell
     (setq ring-bell-function 'ignore)

     ;; echo keybindings to minibuffer faster
     (setq echo-keystrokes 0.1
           use-dialog-box nil)

     ;; highlight parens
     (show-paren-mode t)

     ;; line spacing
     (setq-default line-spacing 0)

     ;; line spacing
     (setq-default line-spacing 0)

     ;; use ibuffer C-x C-b
     (defalias 'list-buffers 'ibuffer)

     ;; default TRAMP
     (setq tramp-default-method "ssh")

     ;; Remove spaces and tabs on save
     (add-hook 'before-save-hook 'delete-trailing-whitespace)

     ;; Better defaults
     (setq save-interprogram-paste-before-kill t
           apropos-do-all t
           mouse-yank-at-point t
           require-final-newline t
           visible-bell t
           load-prefer-newer t
           ediff-window-setup-function 'ediff-setup-windows-plain
           )

     (autoload 'zap-up-to-char "misc"
       "Kill up to, but not including ARGth occurrence of CHAR." t)

     ;; scroll slower
     (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
     (setq mouse-yank-at-point t)

     ;; remove whitespace before save
     (add-hook 'before-save-hook 'whitespace-cleanup)

     ;; stop in CamelCase
     (global-subword-mode 1)

     ;; better line wrapping
     (global-visual-line-mode)

     ;; large file warning (10MB)
     (setq large-file-warning-threshold 10000000)

     ;; Spell
     ;; http://manuel-uberti.github.io/emacs/2016/06/06/spellchecksetup/
     (when (executable-find "hunspell")
       (setq ispell-program-name (executable-find "hunspell")
             ispell-dictionary "gl_ES")
       )

     ;; View
     (require 'view)
#+END_SRC
** Custom functions
   #+BEGIN_SRC emacs-lisp
     (defun comment-or-uncomment-line-or-region ()
       "Comments or uncomments the current line or region."
       (interactive)
       (if (region-active-p)
           (comment-or-uncomment-region (region-beginning) (region-end))
         (comment-or-uncomment-region (line-beginning-position) (line-end-position))
         )
       )

     (defun duplicate-current-line-or-region (arg)
       "Duplicates the current line or region ARG times.
     If there's no region, the current line will be duplicated. However, if
     there's a region, all lines that region covers will be duplicated."
       (interactive "p")
       (let (beg end (origin (point)))
         (if (and mark-active (> (point) (mark)))
             (exchange-point-and-mark))
         (setq beg (line-beginning-position))
         (if mark-active
             (exchange-point-and-mark))
         (setq end (line-end-position))
         (let ((region (buffer-substring-no-properties beg end)))
           (dotimes (i arg)
             (goto-char end)
             (newline)
             (insert region)
             (setq end (point)))
           (goto-char (+ origin (* (length region) arg) arg)))))

   #+END_SRC
** Keybindings
   #+BEGIN_SRC emacs-lisp

     (global-set-key (kbd "C-:") 'comment-or-uncomment-line-or-region)
     (global-set-key (kbd "C-c d") 'duplicate-current-line-or-region)
     (global-set-key (kbd "RET") 'newline-and-indent)
     (global-unset-key "\C-z")
     (global-unset-key "\C-x\C-z")
     (global-set-key (kbd "M-z") 'zap-up-to-char)
     (global-set-key (kbd "C-+") 'text-scale-increase)
     (global-set-key (kbd "C--") 'text-scale-decrease)
     (global-set-key (kbd "M-i") 'imenu)
     (global-set-key (kbd "C-v")   'View-scroll-half-page-forward)
     (global-set-key (kbd "M-v")   'View-scroll-half-page-backward)

     (when (memq window-system '(mac ns))
       (global-set-key (kbd "M-1") "|")
       (global-set-key (kbd "M-2") "@")
       (global-set-key (kbd "M-3") "#")
       (global-set-key (kbd "M-º") "\\")
       (global-set-key (kbd "M-ç") "}")
       (global-set-key (kbd "M-+") "]")
       (global-set-key (kbd "M-ñ") "~")

       )

       #+END_SRC
** Packages
   #+BEGIN_SRC emacs-lisp
     ;;
     ;; PACKAGES
     ;;

     (use-package dash
       :ensure t)

     (use-package smooth-scrolling
       :ensure t
       :init
       (setq smooth-scroll-margin 5)
       :config
       (smooth-scrolling-mode 1)
       )

     (use-package dired
       :init
       (setq dired-dwim-target t)
       (setq global-auto-revert-non-file-buffers t)
       (setq auto-revert-verbose nil)
       :config
       (progn
         (define-key dired-mode-map "F" 'my-dired-find-file)
         (defun my-dired-find-file (&optional arg)
           "Open each of the marked files, or the file under the point, or when prefix arg, the next N files "
           (interactive "P")
           (let* ((fn-list (dired-get-marked-files nil arg)))
             (mapc 'find-file fn-list))))
       )

     (when (fboundp 'winner-mode)
       (winner-mode 1))

     (use-package flycheck
       :ensure t
       :diminish flycheck-mode
       :config
       (setq flycheck-check-syntax-automatically '(save idle-change new-line))
       (setq flycheck-idle-change-delay 5)
       (add-hook 'prog-mode-hook 'global-flycheck-mode)
       (setq-default flycheck-disabled-checkers '(javascript-jshint json-jsonlist))
       )

     (use-package hl-line
       :config
       ;; Highlight the line only in the active window
       (setq hl-line-sticky-flag nil)

       (use-package hl-line+
         :ensure t
         :config
         (toggle-hl-line-when-idle 1) ; Highlight line only when idle
         ;; Number of seconds of idle time after when the line should be highlighted
         (setq hl-line-idle-interval 3)
         ;; Number of seconds for `hl-line-flash' to highlight the line
         (setq hl-line-flash-show-period 3))
       )


     ;; Project management.
     (use-package projectile
       :ensure t
       :commands (projectile-find-file projectile-switch-project)
       :diminish projectile-mode
       :config
       (setq projectile-enable-caching t)
       (projectile-mode)
       )


     (use-package multiple-cursors
       :ensure t
       :config
       (global-set-key (kbd "C->") 'mc/mark-next-like-this)
       (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
       (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
       )

     (use-package emmet-mode
       :ensure t
       :init
       :config
       (setq emmet-expand-jsx-className? t)
       (setq emmet-move-cursor-between-quotes t)
       )

     (use-package markdown-mode
       :ensure t
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
              ("\\.md\\'" . markdown-mode)
              ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown")
       )

     (use-package rainbow-delimiters
       :ensure t
       :init
       (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

     (use-package htmlize
       :ensure t)

     (use-package prettier-js
       :ensure t
       :config
       (setq prettier-js-args '(
                                "--tab-width" "2"
                                "--single-quote"
                                "--jsx-bracket-same-line"
                                ))
       (add-hook 'js2-mode-hook 'prettier-js-mode)
       )

     (use-package expand-region
       :ensure t
       :bind (("C-=" . er/expand-region))
       )

     (use-package recentf
       :ensure t
       :config
       (setq recentf-max-menu-items 50)
       (setq recentf-exclude '("[/\\]\\.elpa/" "[/\\]\\.git/"))
       (recentf-mode 1)
       )

     (use-package ace-window
       :ensure t
       :bind
       ("C-x o" . ace-window)
       :init
       (custom-set-faces
        '(aw-leading-char-face
          ((t (:inherit ace-jump-face-foreground :height 2.0)))))

       (setq aw-background t)
       )

     (use-package iedit
       :ensure t)

     (use-package scss-mode
       :ensure t
       :mode "\\.scss\\'"
       )

     (use-package smartparens
       :ensure t
       :diminish smartparens-mode
       :config
       (progn
         (require 'smartparens-config)
         (sp-local-pair 'js2-mode "{" nil :post-handlers '(:add ("||\n[i]" "RET")))
         (sp-local-pair 'js2-mode "[" nil :post-handlers '(:add ("||\n[i]" "RET")))
         (add-hook 'prog-mode-hook 'smartparens-mode)
         )
       :bind
       ("C-M-k" . sp-kill-sexp)
       ("C-M-f" . sp-forward-sexp)
       ("C-M-b" . sp-backward-sexp)
       ("C-M-n" . sp-up-sexp)
       ("C-M-d" . sp-down-sexp)
       ("C-M-u" . sp-backward-up-sexp)
       ("C-M-p" . sp-backward-down-sexp)
       ("C-M-w" . sp-copy-sexp)
       )

       (use-package web-mode
       :ensure t
       :mode ("\\.html\\'"
              "\\.css\\'"
              "\\.php\\'")
       :init
       (setq-default
        web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-enable-auto-closing t
        web-mode-enable-current-element-highlight t
        web-mode-enable-auto-opening t
        web-mode-enable-auto-pairing nil
        web-mode-enable-auto-quoting nil
        web-mode-enable-auto-indentation t)
       :config
       (add-hook 'web-mode-hook 'emmet-mode)
       )

     (use-package yaml-mode
       :ensure t
       :mode ("\\.yml$" . yaml-mode))


     (use-package color-theme-sanityinc-tomorrow
       :ensure t
       :config (load-theme 'sanityinc-tomorrow-night t)
       )

     (use-package spaceline-config
       :ensure spaceline
       :init
       (setq ns-use-srgb-colorspace nil)
       (setq spaceline-minor-modes-p nil)
       :config
       (spaceline-emacs-theme))


     (use-package which-key
       :ensure t
       :diminish which-key-mode
       :config
       (which-key-mode)
       )

     (use-package drag-stuff
       :ensure t
       :diminish drag-stuff-mode
       :config
       (setq drag-stuff-modifier '(meta super))
       (add-to-list 'drag-stuff-except-modes 'org-mode)
       (drag-stuff-global-mode 1)
       (drag-stuff-define-keys)
       )

     (use-package magit
       :ensure t
       :defer 2
       :bind (("C-x g" . magit-status)))

     (use-package ivy
       :ensure t
       :diminish ivy-mode
       :bind
       ("C-s" . swiper)
       ("C-S-s" . swiper-all)
       ("C-r" . swiper)
       ("M-x" . counsel-M-x)
       ("C-x C-f" . counsel-find-file)
       ("M-y" . counsel-yank-pop)
       ("C-c s" . counsel-ag)
       ("C-c C-r" . ivy-resume)
       :config
       (ivy-mode 1)
       :init
       (setq ivy-use-virtual-buffers t)
       ;; (setq ivy-count-format "(%d/%d) ")
       (setq ivy-height 10)
       (setq ivy-initial-inputs-alist nil)
       (setq ivy-re-builders-alist
             '((t   . ivy--regex-ignore-order)))
       (setq ivy-display-style 'fancy)

       )

     (use-package counsel
       :ensure t)

     (use-package swiper
       :ensure t)

     (use-package counsel-projectile
       :ensure t
       :init
       (counsel-projectile-on)
       :bind
       ("M-p" . counsel-projectile-find-file)
       ("M-P" . counsel-projectile-switch-project)
       )

     (use-package smex
       :ensure t
       :init
       (smex-initialize))

     (use-package exec-path-from-shell
       :ensure t
       :init
       (when (memq window-system '(mac ns x))
         (exec-path-from-shell-initialize)
         )
       )

     (use-package erc
       :init
       (use-package erc-truncate
         :config (add-to-list 'erc-modules 'truncate))
       (use-package erc-autoaway
         :config (add-to-list 'erc-modules 'autoaway))
       (use-package erc-notifications
         :config (add-to-list 'erc-modules 'notifications))
       (use-package erc-track
         :config (erc-track-mode 1))
       :config
       (defvar erc-autoaway-use-emacs-idle t)
       (setq erc-server-coding-system '(utf-8 . utf-8)
             erc-auto-discard-away t
             erc-autoaway-idle-seconds 600
             erc-interpret-mirc-color t
             erc-user-full-name "Berto Yáñez"
             erc-email-userid "berto@ber.to"
             erc-max-buffer-size 10000
             erc-hide-list '("JOIN" "PART" "QUIT" "NICK" "MODE")
             erc-auto-query 'buffer
             erc-server-auto-reconnect t
             erc-server-reconnect-attempts 5
             erc-server-reconnect-timeout 3
             erc-rename-buffers t
             erc-truncate-buffer-on-save t
             erc-hide-list '("PART" "QUIT" "JOIN")
             erc-autojoin-channels-alist '(("freenode.net"
                                            "#emacs-beginners"
                                            "#javascript"))
             erc-server "irc.freenode.net"
             erc-nick "bertez")

       (defvar erc-insert-post-hook)
       (add-hook 'erc-insert-post-hook
                 'erc-truncate-buffer)
       )

     (use-package json-mode
       :ensure t
       :mode (("\\.json\\'" . json-mode)
              ("\\.eslintrc\\'" . json-mode))
       :config (setq-default js-indent-level 2))

     (use-package git-gutter
       :ensure t
       :diminish git-gutter-mode
       :config
       (global-git-gutter-mode t)
       )

     (use-package syntax-subword
       :ensure t
       :diminish subword-mode
       :config
       (setq syntax-subword-skip-spaces t)
       )

     (use-package tern
       :ensure t
       :defer t
       :config
       (setq tern-command (append tern-command '("--no-port-file")))
       (add-hook 'js2-mode-hook 'tern-mode)
       )


     (use-package js2-mode
       :ensure t
       :mode (
              ("\\.jsx?\\'" . js2-jsx-mode)
              ("\\.es6\\'" . js2-jsx-mode)
              )
       :init
       (add-hook 'js2-mode-hook (lambda ()
                                  (tern-mode)
                                  (emmet-mode)
                                  (syntax-subword-mode)
                                  (push '(company-tern :with company-yasnippet) company-backends)
                                  (js2-imenu-extras-mode 1)))
       :config
       (setq js2-basic-offset 2)
       (setq js2-highlight-level 3)
       (setq js2-mode-show-strict-warnings nil)
       (setq js2-mode-show-parse-errors nil)
       (define-key js2-mode-map (kbd "C-c j") 'prettier-js)
       )

     (use-package yasnippet
       :ensure t
       :diminish yas-minor-mode
       :init (yas-global-mode 1))

     (use-package company
       :ensure t
       :diminish company-mode
       :config
       (setq
        company-echo-delay 0
        company-idle-delay 0.2
        company-minimum-prefix-length 1
        company-tooltip-align-annotations t
        company-tooltip-limit 10
        company-tooltip-flip-when-above t
        company-dabbrev-downcase nil
        company-require-match nil
        company-begin-commands '(self-insert-command))

       ;; Add yasnippet support for all company backends
       ;; https://github.com/syl20bnr/spacemacs/pull/179
       (defvar company-mode/enable-yas t
         "Enable yasnippet for all backends.")

       (defun company-mode/backend-with-yas (backend)
         (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
             backend
           (append (if (consp backend) backend (list backend))
                   '(:with company-yasnippet))))

       (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
       (add-hook 'prog-mode-hook  'company-mode)

       )

     (use-package company-tern
       :ensure t
       :init
       (add-to-list 'company-backends 'company-tern)
       :config
       (setq company-tern-property-marker nil)
       )

     (use-package undo-tree
       :ensure t
       :diminish undo-tree-mode
       :init
       (setq undo-tree-visualizer-relative-timestamps t
             undo-tree-visualizer-timestamps t)
       :config
       (global-undo-tree-mode t)
       )


     ;;http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/
     ;;makes sure elfeed reads index from disk before launching
     (defun my/elfeed-load-db-and-open ()
       "Wrapper to load the elfeed db from disk before opening."
       (interactive)
       (elfeed-db-load)
       (elfeed)
       (elfeed-search-update--force))

     ;;write to disk when quiting
     (defun my/elfeed-save-db-and-bury ()
       "Wrapper to save the elfeed db to disk before burying buffer."
       (interactive)
       (elfeed-db-save)
       (quit-window))

     (use-package elfeed
       :ensure t
       :init
       (setq elfeed-db-directory "~/Dropbox/shared/elfeeddb")
       (setq-default elfeed-search-filter "@1-week-ago +unread ")
       :config
       (defun elfeed-search-format-date (date)
         (format-time-string "%d/%m/%Y %H:%M" (seconds-to-time date)))
       :bind
       ("C-x w" . my/elfeed-load-db-and-open)
       (:map elfeed-search-mode-map
                   ("q" . my/elfeed-save-db-and-bury)
                   ("Q" . my/elfeed-save-db-and-bury))
       )

     (use-package elfeed-org
       :ensure t
       :init
       (setq rmh-elfeed-org-files (list "~/Dropbox/Org/feeds/feeds.org"))
       :config
       (elfeed-org)
       )

     (use-package hydra
       :ensure t
       :defer t
       :init
       (defhydra hydra-movement ()
         "quick move"
         ("<left>" windmove-left )
         ("<down>" windmove-down )
         ("<up>" windmove-up )
         ("<right>" windmove-right )
         ("SPC" nil))

       (global-set-key (kbd "C-M-o") 'hydra-movement/body)
      )

     (use-package org
       :ensure t
       :mode ("\\.org\\'" . org-mode)
       :bind (("C-c l" . org-store-link)
              ("C-c c" . org-capture)
              ("C-c a" . org-agenda)
              ("C-c b" . org-iswitchb)
              ("C-c C-w" . org-refile)
              )
       :init
       (define-obsolete-function-alias 'org-define-error 'define-error)
       (setq org-src-fontify-natively t)
       (setq org-todo-keywords
             '((sequence "TODO" "WAITING" "VERIFY" "|" "DONE")))

       (setq org-todo-keyword-faces
             '(("TODO" . "#CC1B44")
               ("VERIFY" . "#C97F50")
               ("WAITING" . "#E0EBD1")
               ("DONE" . "#9BA607")
               ))

       ;;set priority range from A to C with default A
       (setq org-highest-priority ?A)
       (setq org-lowest-priority ?C)
       (setq org-default-priority ?A)

       ;;set colours for priorities
       (setq org-priority-faces '((?A . (:foreground "#F0DFAF" :weight bold))
                                  (?B . (:foreground "LightSteelBlue"))
                                  (?C . (:foreground "OliveDrab"))))


       (setq org-directory "~/Dropbox/Org")
       (setq org-agenda-files '("~/Dropbox/Org"))
       (setq org-default-notes-file (concat org-directory "/Notes.org"))
       (setq org-archive-location "~/Dropbox/Org/archive.org::* From %s")
       )

     (use-package org-bullets
       :ensure t
       :commands (org-bullets-mode)
       :init (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))


     (put 'upcase-region 'disabled nil)
     (put 'dired-find-alternate-file 'disabled nil)

     ;;; init.el ends here
   #+END_SRC
